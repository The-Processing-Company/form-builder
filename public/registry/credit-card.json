{
  "name": "credit-card",
  "type": "registry:ui",
  "registryDependencies": [
    "card",
    "input",
    "select"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "'use client'\n\nimport * as React from 'react'\nimport { useState, useRef } from 'react'\nimport { motion } from 'framer-motion'\nimport { cn } from '@/lib/utils'\nimport { Input } from '@/components/ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Card } from '@/components/ui/card'\nimport { CreditCard as CreditCardIcon, Lock } from 'lucide-react'\n\nexport interface CreditCardValue {\n  cardholderName: string\n  cardNumber: string\n  expiryMonth: string\n  expiryYear: string\n  cvv: string\n  cvvLabel: 'CCV' | 'CVC'\n}\n\nexport interface CreditCardProps {\n  value?: CreditCardValue\n  onChange?: (value: CreditCardValue) => void\n  className?: string\n}\n\nconst formatCardNumber = (value: string) => {\n  const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '')\n  const matches = v.match(/\\d{4,16}/g)\n  const match = matches && matches[0] || ''\n  const parts: string[] = []\n\n  for (let i = 0, len = match.length; i < len; i += 4) {\n    parts.push(match.substring(i, i + 4))\n  }\n\n  if (parts.length) {\n    return parts.join(' ')\n  } else {\n    return v\n  }\n}\n\nconst getCardType = (number: string) => {\n  const cleanNumber = number.replace(/\\s/g, '')\n  if (cleanNumber.startsWith('4')) return 'visa'\n  if (cleanNumber.startsWith('5') || cleanNumber.startsWith('2')) return 'mastercard'\n  if (cleanNumber.startsWith('3')) return 'amex'\n  return 'generic'\n}\n\nconst CreditCard = React.forwardRef<HTMLDivElement, CreditCardProps>(\n  ({ value, onChange, className }, ref) => {\n    const [isFlipped, setIsFlipped] = useState(false)\n    const [focusedField, setFocusedField] = useState<string | null>(null)\n    const cvvInputRef = useRef<HTMLInputElement>(null)\n\n    const currentValue = value || {\n      cardholderName: '',\n      cardNumber: '',\n      expiryMonth: '',\n      expiryYear: '',\n      cvv: '',\n      cvvLabel: 'CVC' as const\n    }\n\n    const handleInputChange = (field: keyof CreditCardValue, newValue: string) => {\n      const updatedValue = { ...currentValue, [field]: newValue }\n      onChange?.(updatedValue)\n    }\n\n    const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const formatted = formatCardNumber(e.target.value)\n      if (formatted.replace(/\\s/g, '').length <= 16) {\n        handleInputChange('cardNumber', formatted)\n      }\n    }\n\n    const handleCvvFocus = () => {\n      setIsFlipped(true)\n      setFocusedField('cvv')\n    }\n\n    const handleCvvBlur = () => {\n      setIsFlipped(false)\n      setFocusedField(null)\n    }\n\n    const cardType = getCardType(currentValue.cardNumber)\n    const currentYear = new Date().getFullYear()\n    const years = Array.from({ length: 20 }, (_, i) => currentYear + i)\n    const months = Array.from({ length: 12 }, (_, i) => {\n      const month = i + 1\n      return { value: month.toString().padStart(2, '0'), label: month.toString().padStart(2, '0') }\n    })\n\n    return (\n      <div ref={ref} className={cn('w-full max-w-md mx-auto', className)}>\n        <div className=\"relative h-56 mb-6 perspective-1000\">\n          <motion.div\n            className=\"relative w-full h-full\"\n            animate={{ rotateY: isFlipped ? 180 : 0 }}\n            transition={{ duration: 0.6, ease: 'easeInOut' }}\n            style={{ transformStyle: 'preserve-3d' }}\n          >\n            <Card className=\"absolute inset-0 w-full h-full bg-slate-800 border-slate-700 text-white p-6 flex flex-col justify-between backface-hidden\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"w-12 h-8 bg-yellow-400 rounded\"></div>\n                <CreditCardIcon className=\"w-8 h-8 opacity-80\" />\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"text-xl font-mono tracking-wider\">\n                  {currentValue.cardNumber || '•••• •••• •••• ••••'}\n                </div>\n                \n                <div className=\"flex justify-between items-end\">\n                  <div>\n                    <div className=\"text-xs opacity-70 uppercase\">Card Holder</div>\n                    <div className=\"font-medium\">\n                      {currentValue.cardholderName || 'YOUR NAME'}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-xs opacity-70 uppercase\">Expires</div>\n                    <div className=\"font-medium\">\n                      {currentValue.expiryMonth && currentValue.expiryYear \n                        ? `${currentValue.expiryMonth}/${currentValue.expiryYear.slice(-2)}`\n                        : 'MM/YY'\n                      }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"absolute inset-0 w-full h-full bg-slate-700 border-slate-600 text-white p-6 flex flex-col justify-between backface-hidden rotate-y-180\">\n              <div className=\"w-full h-12 bg-black mt-4\"></div>\n              \n              <div className=\"flex justify-end items-center space-x-4\">\n                <div className=\"text-right\">\n                  <div className=\"text-xs opacity-70 uppercase\">{currentValue.cvvLabel}</div>\n                  <div className=\"bg-white text-black px-2 py-1 rounded text-center font-mono\">\n                    {currentValue.cvv || '•••'}\n                  </div>\n                </div>\n                <Lock className=\"w-6 h-6 opacity-60\" />\n              </div>\n              \n              <div className=\"text-xs opacity-60 text-center\">\n                This card is protected by advanced security features\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Cardholder Name</label>\n            <Input\n              type=\"text\"\n              placeholder=\"John Doe\"\n              value={currentValue.cardholderName}\n              onChange={(e) => handleInputChange('cardholderName', e.target.value.toUpperCase())}\n              onFocus={() => setFocusedField('cardholderName')}\n              onBlur={() => setFocusedField(null)}\n              className={cn(\n                'transition-all duration-200',\n                focusedField === 'cardholderName' && 'ring-2 ring-blue-500'\n              )}\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Card Number</label>\n            <Input\n              type=\"text\"\n              placeholder=\"1234 5678 9012 3456\"\n              value={currentValue.cardNumber}\n              onChange={handleCardNumberChange}\n              onFocus={() => setFocusedField('cardNumber')}\n              onBlur={() => setFocusedField(null)}\n              className={cn(\n                'font-mono transition-all duration-200',\n                focusedField === 'cardNumber' && 'ring-2 ring-blue-500'\n              )}\n              maxLength={19}\n            />\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Month</label>\n              <Select\n                value={currentValue.expiryMonth}\n                onValueChange={(value) => handleInputChange('expiryMonth', value)}\n              >\n                <SelectTrigger className={cn(\n                  'transition-all duration-200',\n                  focusedField === 'expiryMonth' && 'ring-2 ring-blue-500'\n                )}>\n                  <SelectValue placeholder=\"MM\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {months.map((month) => (\n                    <SelectItem key={month.value} value={month.value}>\n                      {month.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Year</label>\n              <Select\n                value={currentValue.expiryYear}\n                onValueChange={(value) => handleInputChange('expiryYear', value)}\n              >\n                <SelectTrigger className={cn(\n                  'transition-all duration-200',\n                  focusedField === 'expiryYear' && 'ring-2 ring-blue-500'\n                )}>\n                  <SelectValue placeholder=\"YYYY\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {years.map((year) => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <Select\n                  value={currentValue.cvvLabel}\n                  onValueChange={(value) => handleInputChange('cvvLabel', value as 'CCV' | 'CVC')}\n                >\n                  <SelectTrigger className=\"w-20 h-6 text-xs\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"CVC\">CVC</SelectItem>\n                    <SelectItem value=\"CCV\">CCV</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Input\n                ref={cvvInputRef}\n                type=\"text\"\n                placeholder=\"123\"\n                value={currentValue.cvv}\n                onChange={(e) => {\n                  const value = e.target.value.replace(/\\D/g, '')\n                  if (value.length <= (cardType === 'amex' ? 4 : 3)) {\n                    handleInputChange('cvv', value)\n                  }\n                }}\n                onFocus={handleCvvFocus}\n                onBlur={handleCvvBlur}\n                className={cn(\n                  'font-mono text-center transition-all duration-200',\n                  focusedField === 'cvv' && 'ring-2 ring-blue-500'\n                )}\n                maxLength={cardType === 'amex' ? 4 : 3}\n              />\n            </div>\n          </div>\n        </div>\n\n        <style dangerouslySetInnerHTML={{\n          __html: `\n            .perspective-1000 {\n              perspective: 1000px;\n            }\n            .backface-hidden {\n              backface-visibility: hidden;\n            }\n            .rotate-y-180 {\n              transform: rotateY(180deg);\n            }\n          `\n        }} />\n      </div>\n    )\n  }\n)\n\nCreditCard.displayName = 'CreditCard'\n\nexport { CreditCard }\n",
      "path": "ui/credit-card.tsx",
      "target": "components/ui/credit-card.tsx"
    }
  ]
}
